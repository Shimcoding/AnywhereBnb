*vue.js

세 부분으로 나눠져 있음
1.template
2.script
3.style


크게 세 가지 구성으로 나뉘어있다
1.Vuex - 앱이나 웹을 이루는 개별 요소들의 정보가 변경되는지를 확인하고, 해당 값들을 업데이트 시켜 주는 역할을 한다
2.Vue CLI - 프로젝트를 자동으로 생성/세팅 해주는 자동화 역할을 한다. 웹 개발에 사용되는 여러 기능들을 모아둔 웹팩(Webpack)을 자동으로 모아 간단하게 몇 번의 클릭만으로 기본적인 세팅을 해주는 역할을 한다.(ex. npm 실제로 Vue CLI는 npm을 통해서 동작한다.)
3.Vue Router - 개별적인 vuex가 돌아다니며 확인을 해야 할 V-Dom들을 향해 이동할 통로 역할을 한다. Vuex 상에 개별 컴포넌트들을 올려 놓고 그걸 Router를 통해 간단히 끌어다가 다른 곳에서 반복적으로 사용할 수 있다. 


Vue를 쓰는 이유 중 대표적인 것이 바로 SPA(싱클 페이지 앱)을 만들 수 있기 때문이다.  새로고침을 통해서 내용이 바뀌는 게 아니라 한 화면 내에서 모든 변화가 이뤄진다. -> 정밀한 컨트롤이 가능해진다. 앱인지 웹 사이트인지 구분이 안 갈 정도.




모든 것이 반응형이 됨
콘솔을 열고 다른 값으로 변경되면 바로 업데이트 됨
더 이상 html과 상호작용 x


v-bind 속성은 디렉티브라고 함.
디렉티브는 Vue에서 제공하는 특수 속성 -> v- 접두사가 붙음 
-특수한 반응형 동작을 함.


Vue 엘리먼트가 Vue에 삽입/업데이트/제거될 때 자동으로 트랜지션 효과를 적용할 수 있음


Vue는 또한 양식에 대한 입력과 앱 상태를 양방향으로 바인딩하는 v-model 제공 -> 실시간으로 접근 가능


Vue 인스턴스를 생성할 때는 options 객체를 전달해야 한다.


복잡한 로직이라면 반드시 computed 속성 사용


computed와 methods의 차이점은
computed 속성은 종속 대상을 따라 저장(캐싱)된다는 것 -> computed 속성은 해당 속성이 종속된 대상이 변경될 때만 함수를 실행합니다. 즉 message가 변경되지 않는 한 계산을 다시 하지 않고 계싼되어 있던 결과를 즉시 반환



명령적인 watch 콜백보다 computed 속성을 사용하는 것이 더 좋음.


computed 속성은 기본적으로 getter 함수만 가지고 있지만 필요한 경우 setter 함수를 만들어 쓸 수 있습니다.


Vue.js에서 computed 프로퍼티는 매우 유용하게 사용됨
computed로 구현 가능한 것이라면 watch는 사용 x
computed를 한 마디로 얘기하자면 반응형 getter


watch 옵션을 사용하면 비동기 연산을 수행하고, 우리가 그 연산을 얼마나 자주 수행하는지 제한하고, 최종 응답을 얻을 때까지 중간 상태를 설정할 수 있습니다.


App.vue -> 메인 페이지


Node.js 설치하면 npm 쓸 수 있음
npm은 각종 웹 개발 라이브러리 설치 도우미
@vue/cli -> vue 프로젝트를 빠르게 생성해 주는 라이브러리


프로젝트 생성은 vue create 프로젝트 명


웹 브라우저로 해석해서 띄울 수 있는건 App.vue가 HTML로 컴파일 되기 때문


node_modules : 프로젝트에 쓰는 라이브러리들
src : 소스코드를 다 담는 곳
public : html 파일, 기타 파일을 보관
package.json : 라이브러리 버전, 프로젝트 설정 기록


데이터는 object 형식으로 저장


{{데이터 바인딩}} 하는 이유
-가변적으로 데이터 값을 주려고
-실시간 자동 렌더링 쓰려고
  

바뀌지 않는 데이터는 굳이 {{데이터바인딩}}을 할 필요가 없다


HTML 속성도 데이터바인딩 가능 
:속성="데이터이름"


반복문 쓸 때 :key 안 쓰면 에러 발생
반복문에 array/object 집어 넣기 가능 -> 자료안의 데이터 개수만큼 반복
:key=""의 용도 -> 반복문 쓸 때 꼭 써야함, 반복문 돌린 요소를 컴퓨터가 구분하기 위해 씀
반복문 변수 작명은 2개까지 가능(, 로 구분)
  -왼쪽 변수는 array 내의 데이터
  -오른쪽 변수는 1씩 증가하는 정수



버튼을 눌렀을 때 자바스크립트를 실행하려면
-전통방식은 onclikc=""
-Vue방식은 v-on:click="" -> @click=""



@click="신고수++" -> '신고수'라는 데이터를 가진 값에 1을 더함



Vue에서 함수 만들기
- methods : { 함수(){} }


Vue에서 함수 만들 때 주의 사항
-함수안에서 데이터 쓸 땐 this.데이터 명


Vue에서 모달창 : 이미지나 어떤 걸 누르면 작은 창의 UI


동적인 UI 만드는 법
0.디자인을 먼저
1.UI의 현재 상태를 데이터로 저장해 둠
2.데이터에 따라 UI가 어떻게 보일지 작성


data() 안에 있는 것들을 state라 부름


import / export 문법 쓰는 법
1.export default 변수명
2.import 변수명 from 그 파일 경로 


import / export 문법 쓰는 법2
1.export {변수1, 변수2 ...}
2.import {변수1} from 경로 


시작이 { 이거면 무조건 object 자료



컴포넌트는 Vue의 가장 강력한 기는 중 하나


props는 단방향 바인딩을 형성한다.


사용자가 접속한 주소에 따라 페이지가 달라지는 것을 라우팅
라우팅 : 사용자가 접속한 주소에 따라 페이지(컴포넌트)가 전환되는 것
vue 라우터는 vue 라이브러리를 이용하여 싱글 페이지 애플리케이션을 구현할 때 사용하는 라이브러리
싱글 페이지 애플리케이션 : 페이지 이동 시 웹 페이지를 요청해서 갱신하는 것이 아니라 미리 해당 페이지를 바당 놓고 화면만 갱신
vue 프로젝트 내부에서는 미리 url을 정의하고, 각 주소마다 vue 페이지를 연결해 놓는다


router-link to=""를 이용하여 화면 이동이 가능
<router-link to="이동할 URL"></router-link> 
화면에서 특정 링크를 클릭해서 페이지를 이동할 수 있게 해줌



컴포넌트는 캡슐화된 코드 블록으로 한 번 생성해 놓을 시 쉽게 재사용 가능


props : 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 대 사용되는 단방향 데이터 전달 방식


v-if와 v-show의 차이
v-if는 fasle일 때 실제로 제거되고
v-show는 false일 때 display가 none으로 된다
v-show가 v-if보다 성능이 좋다


[v-cloak]{
            display: none;
        }
v-cloak을 사용하여 렌더링되어 바인딩 되기 전에 {{}} 태그를 숨길 수 있다
vueJS의 처리가 완료되기 전까지는 존재하고 완료된 후에는 스스로가 제거함



컴포넌트
-웹을 구성하는 로고, 메뉴바, 버튼, 모달창 등 웹 페이지 내의 다양한 UI 요소
-재사용 가능하도록 구조화 한 것

SPA(Single Page Application)
-단일 페이지 어플리케이션
-하나의 펲이지 안에서 피룡한 영역 부분만 로딩 되는 형태
-빠른 페이지 변환
-적은 트래픽 양


<template>
html 문법을 적는 공간 디렉티브를 사용하여 데이터 바인딩이 가능하다
