리팩토링
-각각 기능을 담당하는 부분의 뷰는 이벤트 발생으로 함수만 처리하고 인자같은 것들, 실제 기능은 App.vue로 보내서 거기서 처리한다.
-값을 내려 줘야 하면 props를 이용한다.


컨테이너 컴포넌트


트랜지션(구현 관점, 사용 관점), 애니메이션


예외처리 - 모달 컴포턴트


slot - 일부 UI들을 재사용할 수 있는 것(중요)


트랜지션
CSS classes는 Transition Classes를 의미

Enter, Leave


ES6

Babel
-구 버전 브라우저 중에서는 ES6의 기능을 지원하지 않는 브라우저가 있으므로 transpiling이 필요
-ES6의 문법을 각 브라우저의 호환 가능한 ES5로 변환하는 컴파일러


Hoisting
-선언한 함수와 변수를 해석기가 가장 상단에 있는 것처럼 인식한다.
-js 해석기는 코드의 라인 순서와 관계 없이 함수선언식과 변수를 위한 메모리 공간을 먼저 확보한다.


js 코드 순서

var sum = 5;
sum = sum + i;

function sumAllNumbers(){
}

var i = 10;

->

var sum;
function sumAllNumbers(){

}

var i;

sum = 5;
sum = sum +i;
i = 10;


Arrow Function - 화살표 함수
-함수를 정의할 때 function 이라는 키워드를 사용하지 않고 =>로 대체
-흔히 사용하는 콜백 함수의 문법으 간결화



Enhanced Object Literals - 향상된 객체 리터럴
-객체의 속성을 메서드로 사용할 때 function 예약어를 생략하고 생성 가능

var dic1 = {
  lookup: function lookup() {
    console.log('inf');
  }
};



Modules - 자바스크립트 모듈화 방법
-자바스크립트 모듈 로더 라이브러리(AMD, Commons JS) 기능을 js 언어 자체에서 지원
-호출되기 전까지는 코드 실행과 동작을 하지 않는 특징이 있음

모듈 - 특정 기능을 수행하는 한 단위, 한 자원, 한 문법



Vuex - 상태 관리 라이브러리
-무수히 많은 컴포넌트의 데이터를 관리하기 위한 상태 관리 패턴이자 라이브러리
-React의 Flux 패턴에서 기인함
-Vue.js 중고급 개발자로 성장하기 위한 필수 관문



Flux
-MVC 패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴

Unidirectional data flow
1.action: 화면에서 발생하는 이벤트 또는 사용자의 입력
2.dispatcher: 데이터를 변경하는 방법, 메서드
3.model: 화면에 표시할 데이터
4.view: 사용자에게 비춰지는 화면

Action -> dispatcher -> model ->  view


MVC 패턴의 문제점
-기능 추가 및 변경에 따라 생기는 문제점을 예측할 수가 없음.
-앱이 복잡해지면서 생기는 업데이트 루프


Flux 패턴의 단방향 데이터 흐름
-데이터의 흐름이 여러 갈래로 나뉘지 않고 단방향으로만 처리



Vuex가 왜 필요할까?
-복잡한 애플리케이션에서 컴포넌트의 개수가 많아지면 컴포넌트 간에 데이터 전달이 어려워진다.


Vuex로 해결할 수 있는 문제
-MVC 패턴에서 발생하는 구조적 오류
-컴포넌트 간 데이터 전달 명시
-여러 개의 컴포넌트에서 같은 데이터를 업데이트할 때 동기화 문제


Vuex 컨셉
-State : 컴포넌트 간에 공유하는 데이터 == data()
-View : 데이터를 표시하는 화면 == template
-Action : 사용자의 입력에 따라 데이터를 변경하는 == methods


Vuex 구조
컴포넌트 -> 비동기 로직 -> 동기 로직 -> 상태



Vuex 기술 요소
-state : 여러 컴포넌트에 공유되는 데이터 data
-getters : 연산된 state 값을 접근하는 속성 computed
-mutations : state 값을 변경하는 이벤트 로직,메서드 methods
-actions : 비동기 처리 로직을 선언하는 메서드 aysnc methods


State란?
-여러 컴포넌트 간에 공유할 데이터 -상태

{{this.$store.state.message}}


getters란?
-state 값을 접근하는 속성이자 computed()처럼 미리 연산된 값을 접근하는 속성


mutations란?
-state의 값을 변경할 수 있는 유일한 방법이자 메서드
-commit()으로 동작시킨다.


state는 왜 직접 변경하지 않고 mutations로 변경할까?
-여러 개의 컴포넌트에서 아래와 같이 state 값을 변경하는 경우 어느 컴포넌트에서 해당 state를 변경했는지 추적하기가 어렵다.
-특정 시점에 어떤 컴포넌트가 state를 접근하여 변경한 건지 확인하기 어렵기 때문
-따라서, 뷰의 반응성을 거스르지 않게 명시적으로 상태 변화를 수행, 반응성, 디버깅, 테스팅 혜택.



actions란?
-비동기 처리 로직을 선언하는 메서드, 비동기 로직을 담당하는 mutations
-데이터 요청, Promise, ES6 async과 같은 비동기 처리 모두 actions에 선언



왜 비동기 처리 로직은 actions에 선언해야 할까?
-언제 어느 컴포넌트에서 해당 state를 호출하고, 변경했는지 확인하기가 어려움

state 값의 변화를 추적하기 어렵기 때문에 mutations 속성에는 동기 처리 로직만 넣어야 한다.



Helper - 각 속성들을 더 쉽게 사용하는 방법

헬퍼의 사용법
-헬퍼를 사용하고자 하는 vue 파일에서 아래와 같이 해당 헬퍼를 로딩



mapState
-Vuex에 선언한 state 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼


mapGetters
-Vuex에 선언한 getters 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼


mapMutations
-Vuex에 선언한 mutations 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼


mapActions
-Vuex에 선언한 actions 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼


헬퍼의 유연한 문법
-Vuex에 선언한 속성을 그대로 컴포넌트에 연결하는 문법
-Vuex에 선언한 속성을 컴포넌트의 특정 메서드에다가 연결하는 문법




프로젝트 구조화와 모듈화 방법

