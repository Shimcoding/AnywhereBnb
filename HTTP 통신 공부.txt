모든 것이 HTTP 기반 위에서 동작


개발자는 평생 HTTP 기반위에서 개발
언젠가 한 번은 HTTP 정리해야 함



*인터넷 네트워크


인터넷 통신


IP(인터넷 프로토콜)

IP주소 부여

IP - 인터넷 프로토콜 역할
-지정한 IP 주소에 데이터 전달
-패킷이라는 통신 단위로 데이터 전달

IP 패킷 정보 :
출발지 IP, 목적지 IP, 메시지


서버 패킷 전달:
출발지 IP, 목적지 IP, 메시지

노드들을 타고 전달, 서버들을 거쳐서 전달

IP 프로토콜의 한계

비연결성
-패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송
빈신뢰성
-중간에 패킷이 사라지면?
-패킷이 순서대로 안 오면?
프로그램 구분
-같은 IP를 사용하는 서버에서 통신하는 애플리케이션 둘 이상이면?

발생하는 문제:
대상이 서비스 불능, 패킷 전송
패킷 소실
패킷 전달 순서 문제 발생
-> TCP, UDP가 해결함


TCP, UDP

인터넷 프로토콜 스택의 4계층
네트워크 인터페이스 계층 -> 인터넷 계층 -> 전송 계층 -> 애플리케이션 계층


패킷 : 패키지(ex 수하물 버킷의 합성어)


TCP/IP 패킷 정보:
출발지 port, 목적지 port, 전송 제어, 순서, 검증 정보... 


TCP
-전송 제어 프로토콜
-연결지향 - TCP 3 handshake(가상 연결)
-데이터 전달 보증
-순서 보장
-신뢰할 수 있는 프로토콜
-현재는 대부분 TCP 이용


TCP 3 way handshake
SYN : 접속 요청
ACK : 요청 수락
-ACK와 함께 데이터 전송 가능


데이터 전달 보증
1.데이터 전송
2.데이터 잘 받았음


순서  보장
패킷을 순서대로 보내고 순서대로 받음
-중간에 잘못 오면 다시 보낸다


UDP 특징
-사용자 데이터그램 프로토콜
-기능이 거의 없음
-연결지향 x
-순서 보장 x
-데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름
-정리
  -IP와 거의 같다. +PORT +체크섬(ex 이 메시지가 맞는지 검사) 정도만 추가
  -애플리케이션에서 추가 작업 필요



PORT
-같은 IP 내에서 프로세스 구분

한 번에 둘 이상 연결해야 하면?


패킷 정보에 출발지 ,목적지 PORT를 가지고 있음


FTP - 20,21
TELNET - 23
HTTP - 80
HTTPS - 443



DNS
-도메인 네임 시스템
-ex.전화번호부
-도메인 명을 IP 주소로 변환

IP는 기억하기 어렵다.
IP는 변경이 가능하다.


DNS 사용



*URI와 웹 브라우저 요청 흐름

URI
웹 브라우저 요청 흐름


URI
-로케이터, 이름 또는 둘다  추가로 분류될 수 있다.



URL
-Locator: 리소스가 있는 위치를 지정
-위치는 변할 수 있지만, 이름은 변하지 않는다
-앞으로 URI를 URL과 같은 의미로 이야기하겠음



웹 브라우저 요청 흐름
HTTP 요청 메시지 생성 -> 1.웹 브라우저가 HTTP 메시지 생성 -> 2.SOCKET 라이브러리를 통해 전달 -> TCP/IP 연결(IP,PORT), 데이터 전달 -> 3.TCP/IP 패킷 생성, HTTP 메시지 포함 -> 요청 패킷 도착 -> HTTP 응답 메시지를 만듬 -> 응답 패킷 보냄 -> 응답 패킷 도착 -> 그 안에 내용을 까서 결과를 보게 됨





*HTTP
모든 것이 HTTP
HTTP 메시지에 모든 것을 전송

-HTML, TEXT
-IMAGE, 음성, 영상, 파일
-JSON, XML(API)
-거의 모든 형태의 데이터 전송 가능
-서버 간에 데이터를 주고 받을 때도 대부분 HTTP 사용
-지금은 HTTP 시대


HTTP/1.1 1997년: 가장 많이 사용, 우리에게 가장 중요한 버전


TCP : HTTP/1.1, HTTP/2
UDP : HTTP/3
현재 HTTP/1.1 주로 사용
  -HTTP/2, HTTP/3도 점점 증가


HTTP 특징
-클라이언트 서버 구조
-무상태 프로토콜(스테이스리스). 비연결성
-HTTP 메시지
-단순함, 확장 가능


클라이언트 서버 구조
-Requset Response 구조
-클라이언트는 서버에 요청을 보내고 응답을 대기
-서버가 요청에 대한 결과를 만들어서 응답


무상태 프로토콜 - 스테이리스
-서버가 클라이언트의 상태를 보존 x
-장점: 서버 확장성 높음(스케일 아웃)
-단점: 클라이언트가 추가 데이터 전송


Stateful
-서버가 이전 상태를 보존하는 것


Stateful, Stateless 차이
-상태 유지: 중간에 다른 점원으로 바뀌면 안 된다.
(중간에 다른 점원으로 바뀔 때 상태 저보를 다른 점원에게 미리 알려줘야 한다.)

-무상태: 중간에 다른 점원으로 바뀌어도 된다.
  -갑자기 고객이 증가해도 점원을 대거 투입할 수 있다.
  -갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.
-무상태는 응답 서버를 쉽게 바꿀 수 있따. -> 무한한 서버 증설 가능


상태 유지 - Stateful
-항상 같은 서버가 유지되어야 한다.

중간에 서버가 장애나면?
처음부터 다시

무상태 - Stateless
-아무 서버나 호출해도 된다.
-스케일 아웃 - 수평 확장 유리


Stateless 
실무 한계
-모든 것을 무상태로 설계할 수 있는 경우도 있고 없는 경우도 있다.
-무상태
  ex.로그인이 필요 없는 단순한 서비스 소개 화면
-상태 유지
  ex.로그인
-로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지
-일반적으로 브라우저 쿠키와 서버 세션 등을 사용해서 상태 유지
-상태 유지는 최소한만 사용



비 연결성(connectionless)
-HTTP는 기본이 연결을 유지하지 않는 모델
-일반적으로 초 단위의 이하의 빠른 속도로 응답
-1시간 동안 수천 명이 서비스를 사용해도 실제 서버에서 동시에 처리하는 요청은 수십 개 이하로 매우 작음
  ex. 웹 브라우저에서 계속 연속해서 검색 버튼을 누르지는 않는다.
-서버 자원을 매우 효율적으로 사용할 수 있음

비 연결성 한계와 극복
-TCP/IP 연결을 새로 맺어야 함 - 3 way handshake 시간 추가
-웹 브라우저로 사이트를 요청하면 HTML뿐만 아니라 자바스크립트, css, 추가 이미지 등 수많은 자원이 함꼐 다운로드
-지금은 HTTP 지속 연결(Persistent Connections)로 문제 해결
-HTTP/2, HTTP/3에서 더 많은 최적화


연결을 유지하는 모델
-서버는 연결을 계속 유지, 서버 자원 소모


연결을 유지하지 않는 모델
-서버는 연결을 계속 유지x, 최소한의 자원 유지


HTTP 지속 연결


스테이스리스를 기억하자


HTTP 메시지

요청 메시지, 응답 메시지


HTTP 헤더 용도
-HTTP 전송에 필요한 모든 부가정보
-ex. 메시지 바디의 내용, 메시지 바디의 크기, 압축, 인증, 요청 클라이언트(브라우저) 정보, 서버 애플리케이션 정보, 컈시 관리 정보...
-표준 헤더가 너무 많음
-필요시 임의의 헤더 추가 가능

HTTP 메시지 바디 용도
-실제 전송할 데이터
-HTML 문서, 이미지, 영상 등등



*HTTP 메서드

URI 설계할 때 가장 중요한 건 리소스 식별

리소스의 의미는 뭘까?
-회원을 등록하고 수정하고 조회하는 게 리소스가 아니다.
ex.미네랄을 캐라 -> 미네랄이 리소스
-회원이라는 개념 자체가 바로 리소스이다

리소스와 행위를 분리
-URI는 리소스만 식별
-리소스와 해당 리소스를 대상으로 하는 행위를 분리
  -리소스 : 회원 
  -행위 : 조회, 등록 , 삭제, 변경
-리소스는 명사, 행위는 동사(ex. 미네랄을 캐라)
-행위(메서드)는 어떻게 구분? -> get,post



HTTP 메서드 - GET,POST

HTTP 메서드 종류
주요 메서드

GET : 리소스 조회
POST : 요청 데이터 처리, 주로 등록에 사용
PUT : 리소스를 대체, 해당 리소스가 없으면 생성
PATCH : 리소스 부분 변경
DELETE : 리소스 삭제


HTTP 메서드 종류
기타 메서드
HEAD : GET과 동일하지만 메시지 부분을 제외하고 상태 줄과 헤더만 반환


GET
-리소스 조회
-서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달
-메시지 바디를 사용해서 데이터를 전달할 수 있지만 지원하지 않는 곳이 많아서 권장하지 않음

메시지 전달 -> 서버 도착 -> 응답 데이터


POST
-요청 데이터 처리
-메시지 바디를 통해 서버로 요청 데이터 전달
-서버는 요청 데이터를 처리
  -메시지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행한다.
-주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용

메시지 전달 -> 신규 리소스 생성 -> 응답 데이터


PUT
-리소스를 대체
  -리소스가 있으면 대체
  -리소스가 없으면 생성
  -쉽게 이야기해서 덮어버림
-중요! 클라이언트가 리소스를 식별
  -클라이언트가 리소스 위치를 알고 URI 지정
    ex. /members/100 
  -POST와 차이점
리소스를 완전히 대체!


PATCH -> 지원 안 하면 POST 사용
-리소스 부분 변경


DELETE
-리소스 제거



HTTP 메서드의 속성

안전
-호출해도 리소스를 변경하지 않는다.

 
멱등 Idempotent
-한 번 호출하든 두 번 호출하든 결과가 똑같다.
-멱등 메서드
  -GET
  -PUT
  -DELETE
-활용
 -자동 복구 메커니즘
 -서버가 TIMEOUT 등으로 정상 응답을 못 주었을 때, 클라이언트가 같은 요청을 다시 해도 되는가?

캐시가능 Cacheable
-응답 결과 리소스를 캐시해서 사용해도 되는가?
-GET,HEAD,POST,PATCH 캐시가능
-실제로는 GET,HEAD 정도만 캐시로 사용
  -POST,PATCH는 본문 애용까지 캐시 키로 고려해야 하는데 구현이 쉽지 않음
실무에선 GET만 가능하다는 것으로 동결



